package utool.core;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.util.HashMap;

import utool.networking.SocketWrapper;
import utool.networking.ServerManager;
import utool.plugin.IUTooLCore;
import utool.plugin.PluginData;
import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;

/**
 * This class manages the UTooL Core Service.
 * This service handles all communications between plugins, the core, and other devices.
 * 
 * @author Cory Bryan
 *
 */
public class UTooLCoreService extends Service
{
	/**
	 * String used for core service discovery
	 * @since 10/4/2012
	 */
	static final String UTOOL_SERVICE_NAME = "utool.core.UTooLCoreService";

	/**
	 * Map
	 */
	private static HashMap<Long, IBinder> serverManager = new HashMap<Long, IBinder>();

	@Override
	public void onCreate()
	{
		super.onCreate();
	}

	@Override
	public IBinder onBind(Intent intent)
	{
		long tournamentId = intent.getExtras().getLong("tournamentId");
		
		//Return an existing instance of the service connection if it exists
		if (serverManager.containsKey(tournamentId)){
			return serverManager.get(tournamentId);
		}

		/**
		 * Core-side implementation of the IUTooLCore interface 
		 */
		IUTooLCore.Stub mBinder = new IUTooLCore.Stub()
		{
			private boolean isClient = false;
			private SocketWrapper clientSocket;
			private ServerManager serverManager;
			
			/**
			 * True if this service connection is a client connection, false if a server connection.
			 */
			public boolean isClient(){
				return isClient;
			}
			
			/**
			 * Get the connection count for this service instance. This will always be 1 for a client.
			 */
			public int getConnectionCount(){
				if (isClient){
					return 1;
				} else {
					return serverManager.getConnectionCount();
				}
			}

			/**
			 * Start this service connection in server mode
			 */
			public int startServer() throws RemoteException {
				isClient = false;
				try {
					serverManager = new ServerManager();
					return serverManager.getPort();
				} catch (IOException e) {
					RemoteException r = new RemoteException();
					r.setStackTrace(e.getStackTrace());
					throw r;
				}
			}

			/**
			 * Start this service connection in client mode
			 * @param serverAddress The server address, in bytes, to connect to
			 * @param serverPort The port on the server to connect to
			 */
			public void connectToServer(byte[] serverAddress, int serverPort) throws RemoteException {
				isClient = true;
				InetAddress addr;
				try {
					addr = InetAddress.getByAddress(serverAddress);
					clientSocket = new SocketWrapper(addr, serverPort);
				} catch (Exception e) {
					RemoteException r = new RemoteException();
					r.setStackTrace(e.getStackTrace());
					throw r;
				}
			}

			public void save(PluginData data) throws RemoteException
			{
				// TODO Auto-generated method stub

			}

			public PluginData restore() throws RemoteException
			{
				// TODO Auto-generated method stub
				return null;
			}

			/**
			 * Send messages to the socket(s)
			 * @param message The XML message to send
			 */
			public void send(String message) throws RemoteException
			{
				byte[] data;
				try {
					data = message.getBytes("UTF-8");
					//Choose class to send to, depending on client/server mode
					if (isClient){
						clientSocket.send(data);
					} else {
						serverManager.send(data);
					}
				} catch (UnsupportedEncodingException e) {
				} catch (IOException e) {
					RemoteException r = new RemoteException();
					r.setStackTrace(e.getStackTrace());
					throw r;
				}
			}

			/**
			 * Receive messages from the socket(s)
			 */
			public String receive() throws RemoteException
			{
				String message;
				byte[] data;
				try{
					if (isClient){
						data = clientSocket.receive();
					} else {
						data = serverManager.receive();
					}
					message = new String(data, "UTF-8");
					//TODO: Handle core messages
				} catch (Exception e){
					message = "-1";
				}
				return message;
			}
			
			/**
			 * Close all connections
			 */
			public void close(){
				if (isClient){
					clientSocket.close();
				} else {
					serverManager.close();
				}
			}
			
			/**
			 * Set the initial connection message when this service is in server mode.
			 */
			public void setInitialConnectMessage(String message){
				if (!isClient){
					serverManager.setInitialConnectMessage(message);
				}
			}
		};

		serverManager.put(tournamentId, mBinder);
		return mBinder;
	}

}
